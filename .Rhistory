NullValues = null,
Percentage = round(nulls/nrow(wine_dataset) * 100,2))
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = round(nulls/nrow(wine_dataset) * 100,2))
nulls_summary
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = sprintf("%.2f%%",round(nulls/nrow(wine_dataset) * 100,2)))
nulls_summary
wine_dataset <- read.csv('C:\\Users\\franc\\Documents\\GitHub\\rproject\\Dataset\\winequality.csv')
head(wine_dataset)
# Checking elements inside the dataset
str(wine_dataset) # First attribute is char, the next 11 attributes are numeric, and the last one is integer.
# Check if there is any NULL values
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = sprintf("%.2f%%",round(nulls/nrow(wine_dataset)*100,2)))
nulls_summary
# Importing the wine dataset and printing only some rows
wine_dataset <- read.csv('C:\\Users\\franc\\Documents\\GitHub\\rproject\\Dataset\\winequality.csv')
head(wine_dataset)
# Checking elements inside the dataset
str(wine_dataset) # First attribute is char, the next 11 attributes are numeric, and the last one is integer.
# Check if there is any NULL values
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = sprintf("%.2f%%",round(nulls/nrow(wine_dataset)*100,2)))
nulls_summary
library(tidyverse)
# Dropping rows with NULL as they are not representative
wine_datset %>%
na.omit()
wine_dataset %>%
na.omit()
nulls
wine_dataset %>%
na.omit()
# Check nulls again
nulls <- colSums(is.na(wine_dataset))
nulls
# Check nulls again
wine_dataset
colSums(is.na(wine_dataset))
wine_final <- wine_dataset %>%
na.omit()
# Check nulls again
wine_final
colSums(is.na(wine_final))
nulls_summary
wine2_ds <- wine_dataset %>%
mutate_all(~ ifelse(is.na(.), 0, .))
# Check nulls again
colSums(is.na(wine2_ds))
redw_ds <- wine2_ds %>%
filter(type == "red")
head(redw_ds)
whitew_ds <- wine2_ds %>%
filter(type == "white")
head(wihtew_ds)
redw_ds <- wine2_ds %>%
filter(type == "red")
head(redw_ds)
whitew_ds <- wine2_ds %>%
filter(type == "white")
head(whitew_ds)
data_per_type <- data.frame(
Red_wine = nrow(redw_ds),
White_wine = nrow(whitew_ds))
data_per_type
library(tidyverse)
library(dplyr)
load_dataset <- function(wine_type) {
wine2_ds %>%
filter(type == wine_type)
}
redw_ds <- load_dataset("red")
head(redw_ds)
whitew_ds <- load_dataset("white")
head(whitew_ds)
# Create a class for the dataset, so later I can extract red or white information
wine_ds_class <- function(data) {
structure(list(data = data), class = "wine_ds")
}
# Create a method to load dataset of red and white wines separated.
load_redw <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "red")
}
load_whitew <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "white")
}
wine_data <- wine_ds(wine2_ds) # Using the class to load the dataset
wine_ds_class <- function(data) {
structure(list(data = data), class = "wine_ds")
}
# Create a method to load dataset of red and white wines separated.
load_redw <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "red")
}
load_whitew <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "white")
}
# Load both datasets
wine_data <- wine_ds(wine2_ds) # Using the class to load the dataset
wine_data <- wine_ds(wine2_ds)
wine_data <- wine_ds_class(wine2_ds) # Using the class to load the dataset
redw_ds <- load_redw(wine_data)
whitew_ds <- load_whitew(wine_data)
head(redw_ds)
head(whitew_ds)
# Import libraries
library(tidyverse)
library(dplyr)
# Check working directory and getting the path to import it next
getwd()
file.choose()
# Importing the wine dataset and printing only some rows
wine_dataset <- read.csv('C:\\Users\\franc\\Documents\\GitHub\\rproject\\Dataset\\winequality.csv')
head(wine_dataset)
# Checking elements inside the dataset
str(wine_dataset) # First attribute is char, the next 11 attributes are numeric, and the last one is integer.
# Check if there is any NULL values
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = sprintf("%.2f%%",round(nulls/nrow(wine_dataset)*100,2)))
nulls_summary
# As NULL values are not representative, a second version of dataset is created, replacing the
# null with 0.
wine2_ds <- wine_dataset %>%
mutate_all(~ ifelse(is.na(.), 0, .))
# Check new dataset
colSums(is.na(wine2_ds))
str(wine2_ds)
# Create a class for the dataset, so later I can extract red or white information
wine_ds_class <- function(data) {
structure(list(data = data), class = "wine_ds")
}
# Create a method to load dataset of red and white wines separated.
load_redw <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "red")
}
load_whitew <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "white")
}
# Load both datasets
wine_data <- wine_ds_class(wine2_ds) # Using the class to load the dataset
redw_ds <- load_redw(wine_data) # Load onyl a dataset with red wine
whitew_ds <- load_whitew(wine_data) # Load onyl a dataset with white wine
# Print both again
head(redw_ds)
head(whitew_ds)
# Chekc the amount of rows per dataset
data_per_type <- data.frame(
Red_wine = nrow(redw_ds), # We have 1599 rows
White_wine = nrow(whitew_ds)) # We have 4898 rows
data_per_type
barplot(data_per_type,col = c(1, 2), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75)
barplot(data_per_type,col = c("red", "white"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
str(data_per_type)
barplot(as.numeric(data_per_type),col = c("red", "white"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
barplot(as.numeric(data_per_type), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
barplot(as.numeric(data_per_type), col = ("blue", "lightblue"), width = c(50, 50), las=2, space = 1,
barplot(as.numeric(data_per_type), col= ("blue","lightblue"), width = c(50, 50), las=2, space = 1,
barplot(as.numeric(data_per_type), col = c("blue","lightblue"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
barplot(as.numeric(data_per_type), col = c("#8B0000","#FFFFE0"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
labels <- paste(c("Red", "White"), "wine dataset", "\n", sprintf("%.1f%%", percentages))
percentages <- (data_per_type / sum(data_per_type)) * 100 # Calculation of size of each dataset
labels <- paste(c("Red", "White"), "wine dataset", "\n", sprintf("%.1f%%", percentages))
pie(percentages, labels = labels, col = c("#8B0000", "#FFFFE0"),
main = "Proportion of Red and White Wine Datasets")
library(ggplot2)
ggplot(data_per_type, aes(x = wine_type, y = count, fill = c("Red_wine","White_wine"))) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
scale_fill_manual(values = c("#8B0000", "#FFFFE0")) +
labs(
title = "Size of sample by type of wine",
y = "Count",
x = "Wine Dataset"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data_per_type, aes(x = c("Red_wine","Wihte_wine"), y = count, fill = c("Red_wine","White_wine"))) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
scale_fill_manual(values = c("#8B0000", "#FFFFE0")) +
labs(
title = "Size of sample by type of wine",
y = "Count",
x = "Wine Dataset"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- data.frame(
Wine_Type = c("Red Wine", "White Wine"),
Count = data_per_type
)
data_by_type <- data.frame(
Wine_Type = c("Red Wine", "White Wine"),
Count = data_per_type
)
data_by_type <- data.frame(
Wine_Type = c("Red Wine", "White Wine"),
Count = data_per_type
)
ggplot(data_by_type, aes(x = Wine_Type, y = Count, fill = Wine_Type)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
scale_fill_manual(values = c("#8B0000", "#FFFFE0")) +
labs(
title = "Size of sample by type of wine",
y = "Count",
x = "Wine Dataset"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_per_type <- data.frame(
Red_wine = nrow(redw_ds), # We have 1599 rows
White_wine = nrow(whitew_ds)) # We have 4898 rows
data_by_type <- data.frame(
Wine_Type = c("Red Wine", "White Wine"),
Count = data_per_type
)
ggplot(data_by_type, aes(x = Wine_Type, y = Count, fill = Wine_Type)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
scale_fill_manual(values = c("#8B0000", "#FFFFE0")) +
labs(
title = "Size of sample by type of wine",
y = "Count",
x = "Wine Dataset"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_by_type <- data.frame(
Wine_Type = c("Red Wine", "White Wine"),
Count = data_per_type)
ggplot(data_by_type, aes(x = Wine_Type, y = Count, fill = Wine_Type)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
scale_fill_manual(values = c("#8B0000", "#FFFFE0")) +
labs(
title = "Size of sample by type of wine",
y = "Count",
x = "Wine Dataset"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
barplot(as.numeric(data_per_type), col = c("#8B0000","#FFFFE0"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine dataset", "White wine dataset"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
barplot(as.numeric(data_per_type), col = c("#8B0000","#FFFFE0"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine", "White wine"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "Count", xlab = "Wine Dataset")
barplot(as.numeric(data_per_type), col = c("#8B0000","#FFFFE0"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine", "White wine"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "n° of wines in sample", xlab = "Wine Dataset",
ylim = c(0, 4500))
barplot(as.numeric(data_per_type), col = c("#8B0000","#FFFFE0"), width = c(50, 50), las=2, space = 1,
names.arg= c("Red wine", "White wine"), cex.names=0.75,
main = "Size of sample by type of wine", ylab = "n° of wines in sample", xlab = "Wine Dataset",
ylim = c(0, 5000))
summary(redw_ds)
summary(whitew_ds)
head(redw_ds)
head(whitew_ds)
summary(redw_ds)
summary(whitew_ds)
class(wine_ds_class)
ggplot(redw_ds, aes(x = quality, y = citric.acid)) +
geom_point() +
labs(title = "Scatter Plot de Calidad vs. Acidez Cítrica",
x = "Acidez Cítrica",
y = "Calidad")
# Import libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(reshape2)
library(grid)
wine_dataset <- read.csv('C:\\Users\\franc\\Documents\\GitHub\\rproject\\Dataset\\winequality.csv')
# Exploring the dataset
names(wine_dataset) # Show column names
str(wine_dataset) # First attribute is char, the next 11 attributes are numeric, and the last one is integer
summary(wine_dataset) # Show extra information about elements inside dataset
nrow(wine_dataset) # Check number of rows
ncol(wine_dataset) # Check number of columns
dim(wine_dataset) # Check dimensions (rows and columns)
View(wine_dataset) # View of the DataFrame
head(wine_dataset) # Printing the first rows
tail(wine_dataset) # Printing the last rows
# Check if there is any NULL values
nulls <- colSums(is.na(wine_dataset))
nulls_summary <- data.frame(
NullValues = nulls,
Percentage = sprintf("%.2f%%",round(nulls/nrow(wine_dataset)*100,2)))
nulls_summary
# As NULL values are not representative, a second version of dataset is created, replacing the
# null with 0.
wine2_ds <- wine_dataset %>%
mutate_all(~ ifelse(is.na(.), 0, .))
# Check new dataset
colSums(is.na(wine2_ds))
str(wine2_ds)
# Create a class for the dataset, so later I can extract red or white information
wine_ds_class <- function(data) {
structure(list(data = data), class = "wine_ds")
}
# Create a method to load dataset of red and white wines separated.
load_redw <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "red")
}
load_whitew <- function(wine_obj) {
data <- wine_obj$data
data %>%
filter(type == "white")
}
# Load both datasets
wine_data <- wine_ds_class(wine2_ds) # Using the class to load the dataset
redw_ds <- load_redw(wine_data) # Load only a dataset with red wine
whitew_ds <- load_whitew(wine_data) # Load only a dataset with white wine
# Print both again
head(redw_ds)
head(whitew_ds)
# Repeat summary of each new dataset
summary(redw_ds)
summary(whitew_ds)
# Chekc the amount of rows per dataset
data_per_type <- data.frame(
Red_wine = nrow(redw_ds), # We have 1599 rows
White_wine = nrow(whitew_ds)) # We have 4898 rows
data_per_type
ggplot(redw_ds, aes(x = quality, y = citric.acid)) +
geom_point() +
labs(title = "Scatter Plot de Calidad vs. Acidez Cítrica",
x = "Acidez Cítrica",
y = "Calidad")
ggplot(redw_ds, aes(x = alcohol, y = pH)) +
geom_point() +
labs(title = "Scatter Plot de Calidad vs. Acidez Cítrica",
x = "Alcohol",
y = "pH")
ggplot(aes(x=alcohol,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=calidad,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=calidad,y=density),
data = wine2_ds)+
geom_line(aes(color=type))+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x = calidad, y = density),
data = wine2_ds) +
geom_point(aes(color = type)) +
ggtitle('Densidad en función de la Calidad del Vino y Tipo') +
xlab('Calidad') +
ylab('Densidad')
ggplot(aes(x=quality,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=quality,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary')+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=quality,y=density),
data = wine2_ds)+
geom_line(aes(color=type))+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=quality,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=quality, y=pH),
data = redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for White wine')
rw <-ggplot(aes(x=quality), data =  redw_ds) +
geom_histogram(color =I('black'),fill = I('#8B0000'), binwidth = 0.5) +
ggtitle('Quality distribution for red wine') +
xlab('Quality') +
ylab('n° of wines in sample') +
scale_x_continuous(breaks = unique(redw_ds$quality))
rw <-ggplot(aes(x=quality), data =  redw_ds) +
geom_histogram(color =I('black'),fill = I('#8B0000'), binwidth = 0.5) +
ggtitle('Quality distribution for red wine') +
xlab('Quality') +
ylab('n° of wines in sample') +
scale_x_continuous(breaks = unique(redw_ds$quality))
ww <-ggplot(aes(x=quality), data =  whitew_ds) +
geom_histogram(color =I('black'),fill = I('#FFFFE0'), binwidth = 0.5) +
ggtitle('Quality distribution for white wine') +
xlab('Quality') +
ylab('n° of wines in sample') +
scale_x_continuous(breaks = unique(redw_ds$quality))
grid.arrange(rw,ww,ncol=2)
ggplot(aes(x=quality,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
# Quality-density relation
ggplot(aes(x=pH,y=volatile.acidity),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
ggplot(aes(x=pH),
data =  redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for White wine')
ggplot(redw_ds, aes(x = alcohol, y = pH)) +
geom_point() +
labs(title = "Scatter Plot de Calidad vs. Acidez Cítrica",
x = "Alcohol",
y = "pH")
ggplot(aes(x=pH),
data = redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for red wine')
ggplot(aes(x=pH),
data = whitew_ds)+
geom_histogram(color =I('black'),fill = I('#FFFFE0'))+
ggtitle('pH distribution for red wine')
ggplot(aes(x=pH),
data = redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for red wine')+
xlab('pH') +
ylab('Frecuencia') +
theme_minimal() +
coord_cartesian(xlim = c(2, 4))
ggplot(aes(x=pH),
data = redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for red wine')+
xlab('pH') +
ylab('Frecuencia') +
theme_minimal() +
coord_cartesian(xlim = c(2.5, 4))
ggplot(aes(x=pH),
data = whitew_ds)+
geom_histogram(color =I('black'),fill = I('#FFFFE0'))+
ggtitle('pH distribution for red wine')+
xlab('pH') +
ylab('Frecuencia') +
theme_minimal() +
coord_cartesian(xlim = c(2.5, 4))
# pH
rw_ph <- ggplot(aes(x=pH),
data = redw_ds)+
geom_histogram(color =I('black'),fill = I('#8B0000'))+
ggtitle('pH distribution for red wine')+
xlab('pH') +
ylab('Frecuencia') +
theme_minimal() +
coord_cartesian(xlim = c(2.5, 4))
ww_ph <- ggplot(aes(x=pH),
data = whitew_ds)+
geom_histogram(color =I('black'),fill = I('#FFFFE0'))+
ggtitle('pH distribution for red wine')+
xlab('pH') +
ylab('Frecuencia') +
theme_minimal() +
coord_cartesian(xlim = c(2.5, 4))
grid.arrange(rw_ph,ww_ph,ncol=2)
ggplot(aes(x=alcohol,y=density),
data = wine2_ds)+
geom_line(aes(color=type),stat='summary',fun.y=median)+
ggtitle('Alcohol content across Wine types')
tinytex::install_tinytex()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(tinytex)
install.packages("shiny")
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("flexdashboard")
install.packages("plotly")
install.packages("shiny", repos='https://cran.rstudio.com/')
setwd(C:\Users\franc\Documents\GitHub\dscoding-projects)
setwd("C:\Users\franc\Documents\GitHub\dscoding-projects")
setwd("C:/Users/franc/Documents/GitHub/dscoding-projects")
